180-[JAWS]-Lab - Configuring an Amazon VPC
Configuring an Amazon VPC Lab
Lab Overview
Amazon Virtual Private Cloud (Amazon VPC) enables you to provision a logically isolated section of the AWS Cloud. With a VPC, you can define a virtual network, configure IP address ranges, create subnets, and set up route tables and network gateways. This lab guides you through creating a VPC with public and private subnets, an internet gateway, a NAT gateway, and deploying an Amazon EC2 instance.
Objectives
By the end of this lab, you will be able to:

Create a VPC with a private and public subnet, an internet gateway, and a NAT gateway.
Deploy an EC2 instance in the public subnet (bastion server).
Deploy an EC2 instance in the private subnet and verify internet connectivity via the NAT gateway.

Task 1: Creating a VPC
In this task, you create a new VPC.

In the AWS Management Console, search for VPC in the search bar and select it to open the VPC Management Console.
In the left navigation pane, under Virtual Private Cloud, choose Your VPCs.
Note: A default VPC with a CIDR block of 172.31.0.0/16 is already created in every region.


Choose Create VPC and configure the following:
Resources to create: Select VPC only.
Name tag: Enter Lab VPC.
IPv4 CIDR block: Choose IPv4 CIDR manual input.
IPv4 CIDR: Enter 10.0.0.0/16.
IPv6 CIDR block: Choose No IPv6 CIDR block.
Tenancy: Select Default.
Tags: Leave as is.


Choose Create VPC.
A confirmation message will display: "You successfully created VPC [VPC-ID]/Lab VPC".


Select the new VPC, choose Actions, and select Edit VPC settings.
In the DNS settings section, enable DNS hostnames.
Choose Save.
EC2 instances launched in this VPC will now automatically receive a public IPv4 DNS hostname.



Task 2: Creating Subnets
In this task, you create a public and a private subnet.
Task 2.1: Creating a Public Subnet

In the left navigation pane, under Virtual Private Cloud, choose Subnets.
Choose Create subnet and configure:
VPC ID: Select Lab VPC.
Subnet name: Enter PubLab Subnet.
Availability Zone: Select the first Availability Zone in the list (do not choose "No preference").
IPv4 CIDR block: Enter 10.0.1.0/24.


Choose Create subnet.

Task 2.2: Creating a Private Subnet

Repeat the steps for creating a subnet with the following configuration:
VPC ID: Select Lab VPC.
Subnet name: Enter Private Subnet.
Availability Zone: Select the same Availability Zone as the public subnet.
IPv4 CIDR block: Enter 10.0.2.0/24.


Choose Create subnet.

Task 3: Creating an Internet Gateway
In this task, you create and attach an internet gateway to allow public subnet resources to access the internet.

In the left navigation pane, choose Internet Gateways.
Choose Create internet gateway and configure:
Name tag: Enter Lab IGW.


Choose Create internet gateway.
Select the new internet gateway, choose Actions, and select Attach to VPC.
Select Lab VPC and choose **Attach internet gateway`.

Task 4: Configuring Route Tables
In this task, you configure route tables for the public and private subnets.
Task 4.1: Public Route Table

In the left navigation pane, choose Route Tables.
Select the route table associated with Lab VPC (or create a new one if needed).
Choose Routes tab, then Edit routes.
Add a new route:
Destination: 0.0.0.0/0.
Target: Select the internet gateway (Lab IGW).


Choose Save routes.
In the Subnet associations tab, associate the route table with PubLab Subnet.

Task 4.2: Private Route Table

Create a new route table for Lab VPC:
Name tag: Enter Private Route Table.


Choose Create route table.
This route table will be updated later to route traffic through the NAT gateway.

Task 5: Launching a Bastion Server
In this task, you launch an EC2 instance in the public subnet to act as a bastion server.

In the AWS Management Console, search for EC2 and open the EC2 Management Console.
Choose Launch instance and configure:
Name: Enter Bastion Server.
Application and OS Images: Select Amazon Linux, then Amazon Linux 2023 AMI.
Instance type: Select t3.micro.
Key pair: Choose Proceed without a key pair.
Network settings:
VPC: Select Lab VPC.
Subnet: Select PubLab Subnet.
Auto-assign public IP: Enable.
Firewall (security groups): Create a new security group.
Security group name: Enter Bastion SG.
Description: Enter Allow SSH.
Inbound rules:
Type: SSH.
Source: Anywhere (0.0.0.0/0).








Choose Launch instance.
Choose View all instances to monitor the instance state (it will transition from Pending to Running).
Note: Proceed to the next task without waiting for the instance to be fully running.



Task 6: Creating a NAT Gateway
In this task, you create a NAT gateway in the public subnet and configure the private route table.

In the AWS Management Console, search for NAT gateways and select it.
Choose Create NAT gateway and configure:
Name: Enter Lab NAT Gateway.
Subnet: Select PubLab Subnet.
Elastic IP: Choose Allocate Elastic IP.


Choose Create NAT gateway.
In the left navigation pane, choose Route Tables.
Select Private Route Table.
In the Routes tab, choose Edit routes.
Add a new route:
Destination: 0.0.0.0/0.
Target: Select the NAT gateway (Lab NAT Gateway).


Choose Save routes.
In the Subnet associations tab, associate the route table with Private Subnet.

Optional Challenge: Testing the Private Subnet
This optional task involves launching an EC2 instance in the private subnet and verifying its internet connectivity.
Launching an Instance in the Private Subnet

Follow the steps used to launch the bastion server, with the following configuration:
Name: Enter Private Instance.
Application and OS Images: Select Amazon Linux, then Amazon Linux 2023 AMI.
Instance type: Select t3.micro.
Key pair: Choose Proceed without a key pair.
Network settings:
VPC: Select Lab VPC.
Subnet: Select Private Subnet.
Firewall (security groups): Create a new security group.
Security group name: Enter Private Instance SG.
Description: Enter Allow SSH from Bastion.
Inbound rules:
Type: SSH.
Source: Custom, enter 10.0.1.0/24 (the CIDR block of the public subnet).








Choose Launch instance.

Logging in to the Bastion Server

In the AWS Management Console, search for EC2 and open the EC2 Management Console.
Select the Bastion Server instance.
Choose Connect, then select the EC2 Instance Connect tab and click Connect.
Alternatively, use an SSH client (refer to AWS documentation for guidance).


Keep the terminal window open for the next steps.

Logging in to the Private Instance

In the EC2 Management Console, select the Private Instance and copy its Private IPv4 address (e.g., 10.0.2.123).
In the terminal window connected to the bastion server, run:ssh <PRIVATE_IP>

Example:ssh 10.0.2.123


When prompted for a password, enter lab-password.
You should now be connected to the private instance via the bastion server.

Testing the NAT Gateway

In the terminal connected to the private instance, run:ping amazon.com


Verify that you receive responses, indicating that the private instance can access the internet via the NAT gateway. Example output:64 bytes from 176.32.20.186: icmp_seq=1 ttl=230 time=11.2 ms



Conclusion
In this lab, you successfully:

Created a VPC with a public and private subnet.
Configured an internet gateway for public subnet access.
Set up a NAT gateway to allow private subnet instances to access the internet.
Launched a bastion server in the public subnet and a private instance in the private subnet.
Verified connectivity from the private instance to the internet via the NAT gateway.

This configuration demonstrates a secure and scalable VPC setup for deploying AWS resources.
